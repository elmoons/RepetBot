import base64
import io
import re

import cairosvg
from aiogram import Dispatcher, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    BufferedInputFile,
)
from sqlalchemy import insert, select, delete

from src.config import settings
from src.convert_images import image_to_base64
from src.database.database import async_session_maker
from src.database.models import Student
from src.parse_tasks import get_problem_info, get_random_task_id
from src.utils import check_registration

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
NAME_PATTERN = re.compile(r"^[–∞-—è—ëa-z\- ]{2,}$", re.IGNORECASE)
EMAIL_PATTERN = re.compile(r"^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$", re.IGNORECASE)
PHONE_PATTERN = re.compile(
    r"^(\+7|7|8)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$"
)


dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=settings.BOT_TOKEN)


class RegisterStudentState(StatesGroup):
    get_student_name = State()
    get_student_email = State()
    get_student_phone_number = State()


class TaskStates(StatesGroup):
    waiting_for_solution = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞–Ω–∏—è –û–ì–≠/–ï–ì–≠ –ø–æ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ!\n"
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–µ–Ω—é!"
    )


@dp.message(Command(commands="get_info"))
async def command_get_info_handler(message: Message):
    await message.answer("""
    **üí°–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ø—Ä –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –û–ì–≠ –∏ –ï–ì–≠. 
üïñ–û–Ω —Å—ç–∫–æ–Ω–æ–º–∏—Ç —Ç–≤–æ–µ –≤—Ä–µ–º—è, –≤–µ–¥—å —Ç–µ–±–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. 
üëä–û–Ω —è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ–∏–º —Ç—Ä–µ–Ω–µ—Ä–æ–º; —Å –µ–≥–æ –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫—Ä—É–≥–æ–∑–æ—Ä —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∑–∞–¥–∞–Ω–∏–π —ç–∫–∑–∞–º–µ–Ω–∞.**
""")


math_task_numbers = [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
]


@dp.message(Command(commands="generate_task"))
@check_registration
async def command_test_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in math_task_numbers[:5]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[5:10]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[10:15]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[15:19]],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:", reply_markup=keyboard
    )


@dp.message(F.text.in_(math_task_numbers))
async def handle_task_selection(message: Message, state: FSMContext):
    task_number = message.text

    await state.update_data(task_number=task_number)

    task_id = get_random_task_id(int(task_number))
    problem_info = get_problem_info("math", f"{task_id}")

    solution_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")],
            [KeyboardButton(text="üîÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        f"üìù –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_number} ({problem_info["id_of_task"]}):\n\n{problem_info['condition_clean']}",
        reply_markup=solution_keyboard,
    )

    image_tasks = problem_info["images_task"]
    print(image_tasks)
    for i in range(len(image_tasks)):
        svg_coded_string = image_to_base64(image_tasks[i])
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 SVG
            svg_bytes = base64.b64decode(svg_coded_string)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
            png_bytes = io.BytesIO()
            cairosvg.svg2png(bytestring=svg_bytes, write_to=png_bytes)
            png_bytes.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –∫–∞–∫ —Ñ–æ—Ç–æ
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=BufferedInputFile(png_bytes.getvalue(), filename="image.png"),
            )
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    await state.set_state(TaskStates.waiting_for_solution)
    await state.update_data(problem_info=problem_info)


@dp.message(F.text == "‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", TaskStates.waiting_for_solution)
async def handle_solution_request(message: Message, state: FSMContext):
    data = await state.get_data()
    task_number = data.get("task_number")
    problem_info = data.get("problem_info")

    await message.answer(
        f"‚úÖ –†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_number} ({problem_info["id_of_task"]}):\n\n{problem_info['solution_clean']}",
        reply_markup=ReplyKeyboardRemove(),
    )
    solution_tasks = problem_info["images_solution"]

    print(solution_tasks)
    for i in range(len(solution_tasks)):
        svg_coded_string = image_to_base64(solution_tasks[i])
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 SVG
            svg_bytes = base64.b64decode(svg_coded_string)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
            png_bytes = io.BytesIO()
            cairosvg.svg2png(bytestring=svg_bytes, write_to=png_bytes)
            png_bytes.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –∫–∞–∫ —Ñ–æ—Ç–æ
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=BufferedInputFile(png_bytes.getvalue(), filename="image.png"),
            )
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    await state.clear()
    await state.update_data(problem_info=problem_info)


@dp.message(F.text == "üîÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", TaskStates.waiting_for_solution)
async def handle_change_task(message: Message, state: FSMContext):
    await state.clear()

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in math_task_numbers[:5]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[5:10]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[10:15]],
            [KeyboardButton(text=str(i)) for i in math_task_numbers[15:19]],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:", reply_markup=keyboard
    )


@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())


@dp.message(Command(commands="registration"))
async def command_registration_handler(message: Message, state: FSMContext):
    await state.clear()

    async with async_session_maker() as session:
        query = select(Student).filter_by(tg_id=message.from_user.id)
        result = await session.execute(query)
        student_data = result.scalars().one_or_none()
        if student_data:
            await state.clear()
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /change_my_data"
            )
            return

    await state.set_state(RegisterStudentState.get_student_name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–ø–∏—à–∏ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)."
    )


@dp.message(RegisterStudentState.get_student_name)
async def get_email_student(message: Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    name_parts = message.text.split()

    if len(name_parts) < 3:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)"
        )
        return

    for part in name_parts:
        if not NAME_PATTERN.fullmatch(part):
            await message.answer(
                "‚ùå –§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
            )
            return

    await state.update_data(student_name=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É!")
    await state.set_state(RegisterStudentState.get_student_email)


@dp.message(RegisterStudentState.get_student_email)
async def get_phone_student(message: Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not EMAIL_PATTERN.fullmatch(message.text):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
        return

    await state.update_data(student_email=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(RegisterStudentState.get_student_phone_number)


@dp.message(RegisterStudentState.get_student_phone_number)
async def final_of_registration(message: Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = (
        message.text.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    )

    if not PHONE_PATTERN.fullmatch(phone):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    if phone.startswith("8"):
        phone = "+7" + phone[1:]
    elif phone.startswith("7"):
        phone = "+" + phone
    elif not phone.startswith("+"):
        phone = "+7" + phone

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–æ–º–µ—Ä–∞
    if len(phone) != 12:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä")
        return

    await state.update_data(student_phone=phone)
    user_data = await state.get_data()

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –§–ò–û –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    name_parts = user_data["student_name"].split()
    last_name = name_parts[0]
    first_name = name_parts[1]
    patronymic = " ".join(name_parts[2:]) if len(name_parts) > 2 else ""

    try:
        async with async_session_maker() as session:
            stmt_student_add = insert(Student).values(
                tg_id=message.from_user.id,
                last_name=last_name,
                first_name=first_name,
                patronymic=patronymic,
                email=user_data["student_email"],
                number_phone=user_data["student_phone"],
            )
            await session.execute(stmt_student_add)
            await session.commit()

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –§–ò–û: {user_data['student_name']}\n"
            f"üìß Email: {user_data['student_email']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['student_phone']}\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!"
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.clear()


@dp.message(Command(commands="get_me"))
@check_registration
async def command_registration_handler(message: Message):
    async with async_session_maker() as session:
        query = select(Student).filter_by(tg_id=message.from_user.id)
        result = await session.execute(query)
        student_data = result.scalars().one_or_none()
    if not (student_data):
        return
    await message.answer(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –§–ò–û: {student_data.last_name + ' ' + student_data.first_name + ' ' + student_data.patronymic}\n"
        f"üìß Email: {student_data.email}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {student_data.number_phone}\n"
    )


@dp.message(Command(commands="change_my_data"))
@check_registration
async def command_change_my_data_handler(message: Message, state: FSMContext):
    await state.clear()
    async with async_session_maker() as session:
        query = delete(Student).where(Student.tg_id == message.from_user.id)
        await session.execute(query)
        await session.commit()
    await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /register")


@dp.message()
@check_registration
async def handle_unknown_message(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."
    )
